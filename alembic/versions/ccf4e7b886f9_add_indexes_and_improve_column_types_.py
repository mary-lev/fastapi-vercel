"""Add indexes and improve column types for performance and validation

Revision ID: ccf4e7b886f9
Revises: 9f37f5a71d61
Create Date: 2025-08-16 18:20:18.714285

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ccf4e7b886f9"
down_revision: Union[str, None] = "9f37f5a71d61"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop unused session_recordings table
    op.drop_index("ix_session_recordings_id", table_name="session_recordings")
    op.drop_table("session_recordings")

    # Create new indexes first (safe operation)
    op.create_index("idx_ai_feedback_attempt", "ai_feedback", ["task_attempt_id"], unique=False)
    op.create_index("idx_ai_feedback_created_at", "ai_feedback", ["created_at"], unique=False)
    op.create_index("idx_ai_feedback_user_task", "ai_feedback", ["user_id", "task_id"], unique=False)
    op.create_index("idx_task_attempts_submitted_at", "task_attempts", ["submitted_at"], unique=False)
    op.create_index("idx_task_attempts_user_task", "task_attempts", ["user_id", "task_id"], unique=False)
    op.create_index("idx_task_solutions_completed_at", "task_solutions", ["completed_at"], unique=False)
    op.create_index("idx_task_solutions_user_task", "task_solutions", ["user_id", "task_id"], unique=False)

    # Handle NOT NULL constraints safely - first delete invalid records
    # Remove ai_feedback records without task_attempt_id
    op.execute("DELETE FROM ai_feedback WHERE task_attempt_id IS NULL")

    # Remove task_solutions with empty solution_content
    op.execute("DELETE FROM task_solutions WHERE solution_content IS NULL OR solution_content = ''")

    # Now safely apply NOT NULL constraints
    op.alter_column("ai_feedback", "task_attempt_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("task_solutions", "solution_content", existing_type=sa.VARCHAR(), nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_task_solutions_user_task", table_name="task_solutions")
    op.drop_index("idx_task_solutions_completed_at", table_name="task_solutions")
    op.alter_column("task_solutions", "solution_content", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_index("idx_task_attempts_user_task", table_name="task_attempts")
    op.drop_index("idx_task_attempts_submitted_at", table_name="task_attempts")
    op.drop_index("idx_ai_feedback_user_task", table_name="ai_feedback")
    op.drop_index("idx_ai_feedback_created_at", table_name="ai_feedback")
    op.drop_index("idx_ai_feedback_attempt", table_name="ai_feedback")
    op.alter_column("ai_feedback", "task_attempt_id", existing_type=sa.INTEGER(), nullable=True)
    op.create_table(
        "session_recordings",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("events", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="session_recordings_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="session_recordings_pkey"),
    )
    op.create_index("ix_session_recordings_id", "session_recordings", ["id"], unique=False)
    # ### end Alembic commands ###
